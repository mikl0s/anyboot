#!/bin/bash

# Define the log file name - this file will be OVERWRITTEN each run
LOG_FILE="build_log.txt"

# Optional: Add script robustness
set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error when substituting.
set -o pipefail # Ensure pipeline failures are reported correctly.

echo "Starting build sequence... Output will overwrite $LOG_FILE and be shown here."
echo "--- Log file: $LOG_FILE ---"
echo "--- Timestamp: $(date) ---"
echo "--------------------------------------------------"

# Group the commands. Redirect the combined stderr (2) of the GROUP
# to the combined stdout (1) of the GROUP. Then pipe that combined
# stream to 'tee', which writes to the file (overwriting it) AND
# to the terminal.
{
  echo "[Running: sudo make clean]"
  sudo make clean
  echo "[Finished: sudo make clean]"

  echo "--------------------------------------------------"
  echo "[Generating Kiosk Autostart File]"
  # Define the target path for the autostart file within includes.chroot
  AUTOSTART_TARGET_DIR="live-build-config/config/includes.chroot/etc/xdg/openbox"
  AUTOSTART_TARGET_FILE="$AUTOSTART_TARGET_DIR/autostart"

  # Read the URL from anyboot.conf
  if [ -f "anyboot.conf" ]; then
    KIOSK_URL=$(grep '^KIOSK_URL=' anyboot.conf | cut -d'=' -f2-)
    if [ -z "$KIOSK_URL" ]; then
      echo "Error: KIOSK_URL not found or empty in anyboot.conf" >&2
      exit 1
    fi
    echo "Using KIOSK_URL: $KIOSK_URL"

    # Ensure the target directory exists
    mkdir -p "$AUTOSTART_TARGET_DIR"

    # Generate the autostart file, overwriting if it exists
    cat << EOF > "$AUTOSTART_TARGET_FILE"
# Autostart applications for Openbox session (Generated by build.sh)

# Launch Firefox in Kiosk mode with the configured URL
firefox --kiosk "$KIOSK_URL" &

# Add other autostart commands below if needed
EOF

    echo "Generated $AUTOSTART_TARGET_FILE"
  else
    echo "Error: anyboot.conf not found! Cannot generate autostart file." >&2
    exit 1
  fi

  echo "--------------------------------------------------"
  echo "[Running: sudo make config]"
  sudo make config
  echo "[Finished: sudo make config]"

  echo "--------------------------------------------------"
  echo "[Reading Kiosk URL from anyboot.conf]"
  # Source the config file safely
  if [ -f "anyboot.conf" ]; then
    # Use grep and cut to extract the URL, handling potential spaces/comments
    KIOSK_URL=$(grep '^KIOSK_URL=' anyboot.conf | cut -d'=' -f2-)
    if [ -z "$KIOSK_URL" ]; then
      echo "Error: KIOSK_URL not found or empty in anyboot.conf" >&2
      exit 1 # Exit the script if URL is missing
    fi
    echo "Found KIOSK_URL: $KIOSK_URL"
  else
    echo "Error: anyboot.conf not found!" >&2
    exit 1 # Exit the script if config file is missing
  fi

  echo "--------------------------------------------------"
  echo "[Running: sudo make build]"
  # The autostart file is now included via includes.chroot
  sudo make build
  echo "[Finished: sudo make build]"

  echo "--------------------------------------------------"
  echo "Build sequence finished."

} 2>&1 | tee "$LOG_FILE"

# Capture the exit status of the command group (before the pipe)
build_status=${PIPESTATUS[0]}

echo "--------------------------------------------------"
if [ $build_status -eq 0 ]; then
  echo "Build sequence completed successfully. Full log saved to $LOG_FILE"
else
  # Using printf for better formatting of error message
  printf "Build sequence failed with status %d. Check output above and full log in %s\n" "$build_status" "$LOG_FILE" >&2
fi

# Exit with the status of the build sequence
exit $build_status
